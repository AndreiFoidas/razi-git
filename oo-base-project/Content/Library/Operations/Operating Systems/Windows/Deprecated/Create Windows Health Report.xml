<?xml version="1.0" encoding="UTF-8"?><operation id="e1308758-4454-4d05-b0a0-77cfde85e44b">
  <descriptionCdata>e1308758-4454-4d05-b0a0-77cfde85e44b.description=&lt;pre&gt;This is a very specialized op used by the windows health check. It should not be used elsewhere.\n\nResponses\:\nsuccess - this is always the response.&lt;/pre&gt;
</descriptionCdata>
  <annotation>e1308758-4454-4d05-b0a0-77cfde85e44b.description</annotation>
  <name>Create Windows Health Report</name>
  <categories/>
  <inputs>
    <staticBinding id="40bec47e-b530-4ea8-abf3-8cda63737d80">
      <annotation/>
      <toContextKey/>
      <fromContextKey/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey/>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_1</inputSymbol>
      <listDelimiter/>
      <value>${in1}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="53bcc278-9a1e-4003-8436-4284bf1e0dfc">
      <annotation/>
      <toContextKey/>
      <fromContextKey/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey/>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_2</inputSymbol>
      <listDelimiter/>
      <value>${in2}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="3289fc95-3b26-41d3-916e-7911baf4d053">
      <annotation/>
      <toContextKey/>
      <fromContextKey/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey/>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_3</inputSymbol>
      <listDelimiter/>
      <value>${in3}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="49226940-6052-4ce5-a505-d65cc4cf37d3">
      <annotation/>
      <toContextKey/>
      <fromContextKey/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey/>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_4</inputSymbol>
      <listDelimiter/>
      <value>${in4}</value>
      <record>false</record>
    </staticBinding>
  </inputs>
  <scriptlet id="6c9cabdc-5569-4483-8a9a-fd351aaa2bb9">
    <annotation/>
    <name>Operation:Create Windows Health Report (e1308758-4454-4d05-b0a0-77cfde85e44b)</name>
    <script>// get all the data that we acquired
hostname = scriptletContext.get("host");
var crlf = " \r\n";

warning = "";
header = "Server Health Report for server " + hostname + ":"+crlf;
report = "\nSystem Check Information:"+crlf+crlf;

// run through all the data we gathered and add it to the report
checkPing();
checkUptime();
showOSInfo();
showLogInfo();
showProcInfo();
showMemInfo();
checkProcessList();
showFSData();
showIOStatInfo();
showNICInfo();

// did we have any warnings?
warnstring = "";
if (warning != "") warnstring = "Warning conditions:"+crlf;

// format the final output information
scriptletResult = header + warnstring + warning + report;

// functions for checking all data

// -----------------------------------------------------------------------------------
//  checkPing ()   - check the data returned from Ping
// -----------------------------------------------------------------------------------
function checkPing() {

   pingOutput = scriptletContext.get("output");

   if (pingOutput != null) {
      // get the max latency
      pingLatency = -1;
      max = pingOutput.match(/Maximum = \d*/);
      if (max != null &amp;&amp; max[0] != null)   {
         pingLatency = max[0].match(/\d+/);
      }
      if (pingLatency == -1) {
         report += "Unable to obtain ping data."+crlf;
         warning += "Unable to obtain ping data."+crlf;
      } 
      else {
         report += "Maximum latency pinging " + hostname + " was " + pingLatency + " ms."+crlf;
         if (pingLatency &gt; 200) warning += "Ping took longer then 200ms"+crlf;
      }

      // check the packet loss
      loss = pingOutput.match(/(\d*)(% loss)/);
      if (loss != null) {
         pct = parseInt(loss[1]);
         report += "Packet loss was " + pct + " %"+crlf;
         if (pct != 0) { 
            warning += "Ping had " + pct + "% packet loss."+crlf;
         }
      }
      else {
         report += "Unable to determine packet loss."+crlf;
         warning += "Unable to determine packet loss."+crlf;     
      }
   }
   else {
      report += "Unable to ping server."+crlf;
      warning += "Unable to ping server."+crlf;
   }
}

// -----------------------------------------------------------------------------------
//  checkUptime ()   - check the data returned from uptime
// -----------------------------------------------------------------------------------

function checkUptime() {

   uptime = scriptletContext.get("ic_uptime");

   // add uptime info
   if (uptime != null) {
	uptime = uptime.split("\n")[1];
report += "Uptime: "+uptime+" seconds."+crlf;
var uptime_trimmed=uptime;

      mins = parseInt(uptime_trimmed)/60;
      hrs = mins /60;
      days = hrs / 24;
      hours = hrs % 24;
      minutes = mins % 60;
      report += "System has been up for ";
      if (days &gt; 0) report += java.lang.Math.floor(days).toString() + " day";
      if (days &gt; 1) report += "s";
      if (hours &gt; 0) report += ", " + java.lang.Math.floor(hours).toString() + " hour";
      if (hours &gt; 1) report += "s";
      report += " " + minutes.toString() + " minute";
      if (minutes != 1) report += "s";
      report += "."+crlf;
      if (mins &lt;= 15) warning += "System was rebooted in the last 15 minutes."+crlf;
   }
   else {
      report += "Unable to obtain uptime."+crlf;
      warning += "Unable to obtain uptime."+crlf;
   }
}

// -----------------------------------------------------------------------------------
//  showOSInfo ()   - process the data about the OS and patch levels
// -----------------------------------------------------------------------------------

function showOSInfo() {

   OS = scriptletContext.get("ic_OS");
   patchList = scriptletContext.get("ic_patchlist");
   report += "\nOperating System information:"+crlf;

   // add the OS info
   if (OS != null) {
      report += "Operating System " + OS + "."+crlf;
   }
   else {
      report += "Unable to obtain OS."+crlf;
      warning += "Unable to obtain OS."+crlf;
   }

   // add patch information
   if (patchList != null) {
      report += "\nInstalled patches:"+crlf + patchList + crlf+crlf;
   } 
   /*else {
      report += "Unable to obtain patch and software list."+crlf;
      warning += "Unable to obtain patch and software list."+crlf;
   }*/
}

// -----------------------------------------------------------------------------------
//  showLogInfo ()   - show recent log data if there is any
// -----------------------------------------------------------------------------------


function showLogInfo() {

   var logMessages = scriptletContext.get("ic_logMessages");

   // any recent log messages?
   if (logMessages != null) {
         report += "Log messages in the last 15 minutes:"+crlf;
         warning += "New log messages in the last 15 minutes."+crlf;

         // get the log messages
         messages = scriptletContext.get("ic_logMessages") +crlf;
         report += messages;
    }
    else {
         //TODO: report += "No new log messages in the last 15 minutes."+crlf;
    }
}

// -----------------------------------------------------------------------------------
//  showProcInfo ()   - show key processor information
// -----------------------------------------------------------------------------------

function showProcInfo() {

   procCount = scriptletContext.get("ic_numProcs");
   procStatus = scriptletContext.get("ic_online");
   load = scriptletContext.get("ic_load");
   blockedThreads = scriptletContext.get("ic_blockedThreads");

   // Add a heading
   report += crlf+"Processor Information:"+crlf;

   // add processor information
   if (procCount != null) {
      num = parseInt(procCount);
      if (num != 1) {
         report += "System has " + procCount + " processors."+crlf;
      }
      else {
         report += "System has 1 processor."+crlf;
      }
   }
   else {
      report += "Unable to get processor count."+crlf;
      warning += "Unable to get processor count."+crlf;
   }
   if (procStatus != null) {
	var loads = load.split(",");
	var statuses = procStatus.split(",");
	report += "processor: \tStatus: \tload:"+crlf;
	for (count = 0; count &lt; num;count++){
		report += count+1+"\t\t";
		report += statuses[count]+"\t\t";
		report += loads[count]+"%"+crlf;
	}
   } 
   else {
      report += "Unable to obtain processor status."+crlf;
      warning += "Unable to obtain processor status."+crlf;
   }


   // check blocked threads
   if (blockedThreads != null) {
      threads = parseInt(blockedThreads);
      if (threads == 0) {
         report += "No blocked threads found. "+crlf;
      }
      else if (threads &lt; 70) {
         report += "Some blocked threads detected. "+crlf;
         warning += "Some blocked threads detected. "+crlf;
      } 
      else {
         report += "Many blocked threads ("+threads+") detected.  System may be CPU bound."+crlf;
         warning += "Many blocked threads ("+threads+") detected.  System may be CPU bound."+crlf;
      }
   }
}

// -----------------------------------------------------------------------------------
//  showMemInfo ()   - show key memory info
// -----------------------------------------------------------------------------------


function showMemInfo() {

   freeMemory = scriptletContext.get("ic_freeMemory");

if (freeMemory != null)
	freeMemory = freeMemory.split("\n")[1];
   if (freeMemory != null) {
      report += "System has " + freeMemory + " kilobytes of free memory. "+crlf;
      if (freeMemory &lt; 100000) warning += "System has less then 100MB of free memory. "+crlf;
   }
   else {
      report += "Unable to obtain memory statistics. "+crlf;
      warning += "Unable to obtain memory statistics. "+crlf;
   }
}

// -----------------------------------------------------------------------------------
//  checkProcessList ()   - verify key processes are running
// -----------------------------------------------------------------------------------


function checkProcessList() {

   //verify that key processes are running
   necessary = processList = "";
   processList += scriptletContext.get("ic_processList");
   necessary += scriptletContext.get("ic_vital");
   output = "";

   // assume list is delimited by comma, pipe, space or newline
   processes = necessary.split(/[,\\\|\n\r]/);
   proc_output = "";
   for (i = 0; i &lt; 10000; i++) {
      if (processes[i] == null) break;
      if (processList.match(processes[i]) == null) {
	if (processes[i] != null &amp;&amp; processes[i] != "null")
	         proc_output += processes[i] + " is not running. "+crlf;
      }
    }

   // are any processes missing?
   if (proc_output == "") {
      report += "All vital processes are running. "+crlf+crlf;
   } 
   else {
      report += proc_output;
      warning += proc_output;
   }
}

// -----------------------------------------------------------------------------------
//  showFSData ()   - show File System data
// -----------------------------------------------------------------------------------

function showFSData() {

   fileList = scriptletContext.get("ic_filesystem");

   if (fileList != null) {
      // data is formatted in two columns: % mountname
      // the first row is a header
      // to split data from context it must be turned back into a native Javascript string
      // to do this we initialize a blank string and then append the variable
      fileData = "";
     // fileData += fileList;
      fileList = ""+fileList;
      filedata = "";
      for (count = 0; count &lt; fileList.length; count++){
	var lastchar =fileData[fileData.length-1]
	if (fileList[count] != '\n' &amp;&amp; fileList[count] != '\r')
		fileData += fileList[count];
	else if (lastchar != '\n' &amp;&amp; lastchar != 'r' &amp;&amp; lastchar != ',')
		fileData += ',';
      }
      lines = fileData.split(",");
      for (i = 3; i+2 &lt; lines.length; i += 3) {
         if (lines[i] != null &amp;&amp; lines[i + 1] != null &amp;&amp; lines[i + 2] != null){
		var left = parseInt(lines[i]);
		var name = lines[i+1];
	 	var total = parseInt(lines[i+2]);
	if (total &gt; 0){
		var percentage = new java.lang.Integer(100 * (left/total)).intValue();
           	 diskreport = "File System " + name + " has " + percentage + "% freespace left."+crlf;
            if (percentage &lt;= 10) {
               report += "WARNING: ";
               warning += diskreport;
            }
            report += diskreport;
}
	}
      }
   }
}
// -----------------------------------------------------------------------------------
//  showIOStatInfo ()   - show key disk info from iostat
// -----------------------------------------------------------------------------------

function showIOStatInfo() {

   iostat = scriptletContext.get("ic_iostat");

   // deal with the iostat information
   // this assume we are getting extended IO stat information and looks for anomolies
   // there should be two readings, the first is the average since boot,
   // the second one is the current 

   output = "\r\nDevice IO checks:"+crlf;
   var combined = "";
if (iostat!= null){
   var split = iostat.split("\n\r, ");

   for (count = 0; count &lt; split.length;count++)
	if (split[count] != null)
		combined += split[count]+",";
}

   if (combined != ","){
   output = "\r\nThe following devices had status's that were not 'ok':"+crlf;
   output += combined;
}
else
	output += "All devices appear to be functioning normally.";
   report += output;
}

function showNICInfo()
{
   data = "";
   data += scriptletContext.get("ic_nicinfo");
   report += data;

   // check each line and see if we need to add a warning
   lines = data.split(/\n/);
   for (i = 0; i &lt; 100; i++) {
      if (lines[i] == null) break;
      if (lines[i] == "") continue;
      if (lines[i].match("No errors") != null) continue;
      warning += lines[i] + crlf;
   }
}</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="ee456a47-dc71-4657-8c29-f3a268d7e94d">
      <annotation/>
      <name>success</name>
      <isDefault>true</isDefault>
      <onFailure>true</onFailure>
      <type>RESOLVED</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="ba0ee11b-3b34-4a66-ad46-8b1b3c65294d">
    <annotation/>
    <name>Field 1</name>
    <fieldName>Field_1</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="c0146867-6e07-43d2-b770-7ee7804c6f33">
    <baseIcon>document.png</baseIcon>
    <basePath>Others/</basePath>
    <readOnly>false</readOnly>
    <layers>
      <iconSpec id="b201598d-ce9d-43f7-b6cb-cbfcf77b6664">
        <baseIcon>edit.png</baseIcon>
        <basePath>Annotations/</basePath>
        <readOnly>false</readOnly>
        <layers/>
      </iconSpec>
    </layers>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
    </groupAliasRef>
  <overrideGroupAlias>${overrideJRAS}</overrideGroupAlias>
</operation>
