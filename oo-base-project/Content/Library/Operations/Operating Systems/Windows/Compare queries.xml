<?xml version="1.0" encoding="UTF-8"?><operation id="9d293ad9-750f-43ef-8410-b3aeb447d771">
  <descriptionCdata>9d293ad9-750f-43ef-8410-b3aeb447d771.description=&lt;pre&gt; Compares wmi results and gives a report. Don't touch this unless you know what you're doing.\n&lt;/pre&gt;\n
</descriptionCdata>
  <annotation>9d293ad9-750f-43ef-8410-b3aeb447d771.description</annotation>
  <name>Compare queries</name>
  <categories/>
  <inputs/>
  <scriptlet id="add85acb-6a27-4e57-b531-32c0fe723807">
    <annotation/>
    <name>Operation Compare queries (9d293ad9-750f-43ef-8410-b3aeb447d771)</name>
    <script>var q1 = scriptletContext.get("query2").split("\n");
var q2 = scriptletContext.get("query1").split("\n");
var delim = scriptletContext.get("delimiter");
if(delim == null){
    delim = ",";
}

var props = scriptletContext.get("properties").split(delim);
var outputDelim = scriptletContext.get("outputDelimiter");
if(outputDelim == null){
    outputDelim = "\r\n";
}

var map1 = new Array();

for (i=0; i&lt;q1.length; i++) {
        var index = q1[i].search(":");
        if(index&gt;0){
            var key = q1[i].substring(0, index);
            var value = q1[i].substring(index+1);
            map1[key] = value;
        }
}

var map2 = new Array();

for (i=0; i&lt;q2.length; i++) {
        var index = q2[i].search(":");
        if(index&gt;0){
            var key = q2[i].substring(0, index);
            var value = q2[i].substring(index+1);
            map2[key] = value;
        }
}

var cmpResults = "";
var val1 = "";
var val2 = "";
var val3 = "";

var allEqual=true;
for (var i in props) {
    var cond = false;
    var propName = props[i];
    var cmp = "==";
    var par1 = props[i].search("\\(");
    var par2 = props[i].search("\\)");
    
    if (par1 != -1 &amp;&amp; par2 != -1 &amp;&amp; par2 &gt; par1) {
        propName = props[i].substring(0, par1);
        cmp = props[i].substring(par1+1, par2);
    }else{
        cond = true;
    }

    if (!(propName in map1) || !(propName in map2)) {
        cmpResults += "undefined,";
        allEqual = false;
        val1 += map1[propName] + delim;
        val2 += map2[propName] + delim;
        continue;
    }
    
    var expr = false;
    if (cmp == "&lt;")
        expr = (map1[propName] &lt; map2[propName]);
    else if (cmp == "&lt;=")
        expr = (map1[propName] &lt;= map2[propName]);
    else if (cmp == "&gt;")
        expr = (map1[propName] &gt; map2[propName]);
    else if (cmp == "&gt;=")
        expr = (map1[propName] &gt;= map2[propName]);
    else if (cmp == "!=")
        expr = (map1[propName] != map2[propName]);
    else
        expr = (map1[propName] == map2[propName]); // default comparator

    if (expr||cond)
        cmpResults += "true,";
    else {
        cmpResults += "false,";
        allEqual = false;
    }
    
    val1 += map1[propName] + delim;
    val2 += map2[propName] + delim;
    if(cond){
        val3 += propName + ":" + map1[propName] + " --- " + map2[propName] + outputDelim;
    }else{
        if(cmp.toString()==""){
            cmp = "==";
        }
        val3 += propName + ":" + map1[propName] + " " + cmp + map2[propName] + "(" + expr + ")" + outputDelim;
    }
}

scriptletResult = (allEqual ? "Success" : "Failure") + "\n" + val3;
</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="730bda22-a6be-46f5-a8fd-6eeac037768a">
      <annotation/>
      <name>success</name>
      <isDefault>true</isDefault>
      <onFailure>false</onFailure>
      <type>RESOLVED</type>
      <matchRules>
        <expression id="f694dc22-16b0-4b2b-ac85-0584e1f99ac7">
          <annotation/>
          <name>Field 1</name>
          <fieldName>Result</fieldName>
          <sourceType>RAWRESULT</sourceType>
          <containsEvaluator id="82556e90-0144-4606-b5dd-6f6710bf2af5">
            <annotation/>
            <name>Config Item</name>
            <text>true</text>
            <ignoreCase>true</ignoreCase>
            <matchType>CONTAINS</matchType>
          </containsEvaluator>
          <filters/>
        </expression>
      </matchRules>
    </opResponse>
    <opResponse id="a65c268c-e8ed-4104-a57d-ad1a676a67d3">
      <annotation/>
      <name>failure</name>
      <isDefault>false</isDefault>
      <onFailure>true</onFailure>
      <type>ERROR</type>
      <matchRules>
        <expression id="387320c2-45e9-442d-9d36-be18c26fb94d">
          <annotation/>
          <name>Field 1</name>
          <fieldName>Result</fieldName>
          <sourceType>RAWRESULT</sourceType>
          <containsEvaluator id="c91731d0-f95f-462c-a1cf-a99baf0f7b91">
            <annotation/>
            <name>Config Item</name>
            <text>false</text>
            <ignoreCase>true</ignoreCase>
            <matchType>CONTAINS</matchType>
          </containsEvaluator>
          <filters/>
        </expression>
      </matchRules>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="c043cd94-a9df-4238-ad7a-d5800ac019df">
    <annotation/>
    <name>returnResult</name>
    <fieldName>returnResult</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="2160e6bb-bb5a-4d2f-9a4f-3366836e1b33">
    <baseIcon>scriptlet.png</baseIcon>
    <basePath>System</basePath>
    <readOnly>false</readOnly>
    <layers/>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
  </groupAliasRef>
  <overrideGroupAlias>${overrideJRAS}</overrideGroupAlias>
</operation>
