<?xml version="1.0" encoding="UTF-8"?><operation id="451c7b19-456d-485b-881a-035b8e4f98af">
  <descriptionCdata>451c7b19-456d-485b-881a-035b8e4f98af.description=&lt;pre&gt;This is a very specialized op used by the windows health check. It should not be used elsewhere.\n\nResponses\:\nsuccess - this is always the response.&lt;/pre&gt;
</descriptionCdata>
  <annotation>451c7b19-456d-485b-881a-035b8e4f98af.description</annotation>
  <name>Create Windows Health Report</name>
  <categories/>
  <inputs/>
  <scriptlet id="58715d50-3f07-4362-8d20-60f44f2e4ff8">
    <annotation/>
    <name>Operation Create Windows Health Report (451c7b19-456d-485b-881a-035b8e4f98af)</name>
    <script>// get all the data that we acquired
hostname = scriptletContext.get("host");
var crlf = " \r\n";

header = "Server Health Report for server &lt;b&gt;" + hostname + "&lt;/b&gt;:"+crlf;
warning = "";
report = "" + crlf;

// run through all the data we gathered and add it to the report
reportPing = scriptletContext.get("reportPing");
warningPing = scriptletContext.get("warningPing");
report += reportPing + crlf;
warning += warningPing + crlf;

reportUptime = scriptletContext.get("reportUptime");
warningUptime = scriptletContext.get("warningUptime");
if ( (reportUptime != null) &amp;&amp; (reportUptime != 'undefined') &amp;&amp; (reportUptime.trim() != ""))
    report += reportUptime + crlf;    
if ( (warningUptime != null) &amp;&amp; (warningUptime != 'undefined') &amp;&amp; (warningUptime.trim() != ""))    
warning += warningUptime + crlf;

reportOS = scriptletContext.get("reportOS");
warningOS = scriptletContext.get("warningOS");
if ( (reportOS != null) &amp;&amp; (reportOS != 'undefined') &amp;&amp; (reportOS.trim() != ""))
    report += reportOS + crlf;
if ( (warningOS != null) &amp;&amp; (warningOS != 'undefined') &amp;&amp; (warningOS.trim() != ""))
    warning += warningOS + crlf;

showProcInfo();

reportMemory = scriptletContext.get("reportMemory");
warningMemory = scriptletContext.get("warningMemory");
if ( (reportMemory != null) &amp;&amp; (reportMemory != 'undefined') &amp;&amp; (reportMemory.trim() != ""))
    report += reportMemory + crlf;
if ( (warningMemory != null) &amp;&amp; (warningMemory != 'undefined') &amp;&amp; (warningMemory.trim() != ""))
    warning += warningMemory + crlf;

reportProcesses = scriptletContext.get("reportProcesses");
warningProcesses = scriptletContext.get("warningProcesses");
if ( (reportProcesses != null) &amp;&amp; (reportProcesses != 'undefined') &amp;&amp; (reportProcesses.trim() != ""))
    report += reportProcesses + crlf;
if ( (warningProcesses != null) &amp;&amp; (warningProcesses != 'undefined') &amp;&amp; (warningProcesses.trim() != ""))
    warning += warningProcesses + crlf;

reportFS = scriptletContext.get("reportFS");
warningFS = scriptletContext.get("warningFS");
if ( (reportFS != null) &amp;&amp; (reportFS != 'undefined') &amp;&amp; (reportFS.trim() != ""))
    report += reportFS + crlf;
if ( (warningFS != null) &amp;&amp; (warningFS != 'undefined') &amp;&amp; (warningFS.trim() != ""))
    warning += warningFS + crlf;

reportIO = scriptletContext.get("reportIO");
warningIO = scriptletContext.get("warningIO");
if ( (reportIO != null) &amp;&amp; (reportIO != 'undefined') &amp;&amp; (reportIO.trim() != ""))
    report += reportIO + crlf;
if ( (warningIO != null) &amp;&amp; (warningIO != 'undefined') &amp;&amp; (warningIO.trim() != ""))
    warning += warningIO + crlf;

reportNIC = scriptletContext.get("reportNIC");
warningNIC = scriptletContext.get("warningNIC");
if ( (reportNIC != null) &amp;&amp; (reportNIC != 'undefined') &amp;&amp; (reportNIC.trim() != ""))
    report += reportNIC + crlf;
if ( (warningNIC != null) &amp;&amp; (warningNIC != 'undefined') &amp;&amp; (warningNIC.trim() != ""))
    warning += warningNIC + crlf;

// did we have any warnings?
warnstring = "";
if (warning != "") warnstring =  crlf + "Summary Of Warnings:" + crlf;

// format the final output information
scriptletResult = header + report  + warnstring + warning ;

// functions for checking all data

// -----------------------------------------------------------------------------------
//  showProcInfo ()   - show key processor information
// -----------------------------------------------------------------------------------

function showProcInfo() {

   procCount = scriptletContext.get("ic_numProcs");
   procStatus = scriptletContext.get("ic_online");
   load = scriptletContext.get("ic_load");
   blockedThreads = scriptletContext.get("ic_blockedThreads");

   // Add a heading
   report += "Processor Information:" + crlf;

   // add processor information
   if (procCount != null &amp;&amp; procCount != "" &amp;&amp; procCount != 'undefined') {
      num = parseInt(procCount);
      if (num != 1) {
         report += "System has " + procCount + " processors."+crlf;
      }
      else {
         report += "System has 1 processor."+crlf;
      }
   }
   else {
      report += "Unable to get processor count."+crlf;
   }
   
   if (procStatus != null &amp;&amp; procStatus != "" &amp;&amp; procStatus != 'undefined') {
	var loads = load.split(",");
	var statuses = procStatus.split(",");
	for (count = 0; count &lt; num;count++){
		report += "Processor: " + count+1 + "; ";
		report += "Status: " + statuses[count] + "; ";
		report += "Load: " + loads[count]+"%" + crlf;
	}
   } 
   else {
      report += "Unable to obtain processor status."+crlf;
   }


   // check blocked threads
   if (blockedThreads != null &amp;&amp; blockedThreads != "" &amp;&amp; blockedThreads != 'undefined') {
      threads = parseInt(blockedThreads);
      if (threads == 0) {
         report += "No blocked threads found. "+crlf;
      }
      else if (threads &lt; 70) {
         report += "Some blocked threads detected. "+crlf;
      } 
      else {
         report += "Many blocked threads ("+threads+") detected.  System may be CPU bound."+crlf;
      }
   }
   
   report += crlf;
}
</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="8dc67f54-ffb4-4d6f-a01b-3404f466e2a6">
      <annotation/>
      <name>success</name>
      <isDefault>true</isDefault>
      <onFailure>true</onFailure>
      <type>RESOLVED</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="7994de78-32b8-43ca-89a0-8073738e67ad">
    <annotation/>
    <name>returnResult</name>
    <fieldName>returnResult</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="cdd4487f-8238-4ddf-9905-bed49a7990aa">
    <baseIcon>document.png</baseIcon>
    <basePath>Others/</basePath>
    <readOnly>false</readOnly>
    <layers>
      <iconSpec id="7b1fcc9b-4066-46bb-be3b-648a26e2af9e">
        <baseIcon>edit.png</baseIcon>
        <basePath>Annotations/</basePath>
        <readOnly>false</readOnly>
        <layers/>
      </iconSpec>
    </layers>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
  </groupAliasRef>
  <overrideGroupAlias>${overrideJRAS}</overrideGroupAlias>
</operation>
