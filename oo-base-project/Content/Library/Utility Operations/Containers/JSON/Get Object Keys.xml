<?xml version="1.0" encoding="UTF-8"?><operation id="e7805628-5540-4dc9-bef1-f2f2c0c589f4">
  <descriptionCdata>e7805628-5540-4dc9-bef1-f2f2c0c589f4.description=Accepts an object in the JavaScript Object Notation format (JSON) and returns the keys of the object as a JSON array.\nA JSON object is an unordered set of key/value pairs, therefore the order of the keys returned is arbitrary.\n\nThe JSON format encodes objects as a set of unordered key/value pairs, which is similar to a structure or map in other programming languages. \nFor example,\n   { "city" \: "Palo Alto", \n     "state" \: "CA" }\nis an object with two elements one with the name "city" having the value "Palo Alto", and the other being the name "state" with the value "CA".  \nThis operation would return keys "city", "state".\n\nJavaScript objects are useful for representing structured data, and are especially when used within an array.  For example, an operation that retrieves\na set of incidents from an external system may return the entire list in onearray of incident objects.  The description of the enclosing folder,\n/Library/Utility Operations/Container/JSON has more examples, and the JSON format is described completely at http\://www.json.org.\n\nInputs\:\n   object -  The JavaScript object. The operation will return a failure if it is not a JavaScript object.\n\nResponses\:\n   success -  The keys of the object were successfully returned, in arbitrary order.\n   failure -  There was some error in processing the object, most likely because the object is not in valid JavaScript Object Notation. \n                  You may wish to use a tool such as http\://www.jsonlint.com/ to help diagnose problems with JavaScript Object Notation.\n\nResults\:\n     returnResult - The primary output will be the keys of the object, in arbitrary order.
</descriptionCdata>
  <annotation>e7805628-5540-4dc9-bef1-f2f2c0c589f4.description</annotation>
  <name>Get Object Keys</name>
  <categories/>
  <inputs>
    <userInputBinding id="6b6a85b4-6433-4558-abe1-913a1b8073b4">
      <annotation>String representation of a JSON object. Objects in JSON are a collection of name value pairs separated by a colon and surrounded with curly brackets {}. The name must be a string value and the value can be a single string or any valid JSON object or array. Examples: {"one":1, "two":2}, {"one":{"a":"a","B":"B"}, "two":"two", "three":[1,2,3.4]}</annotation>
      <assignFromContext>true</assignFromContext>
      <assignToContext>true</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>object</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt/>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
  </inputs>
  <possibleResponses>
    <opResponse id="670c1f22-af2f-41c9-b0f7-da85c2ef3e0f">
      <annotation/>
      <name>success</name>
      <isDefault>false</isDefault>
      <onFailure>false</onFailure>
      <type>RESOLVED</type>
      <matchRules>
        <expression id="27007b7e-dbdf-468c-be10-962315f50ea9">
          <annotation/>
          <name>returnCode</name>
          <fieldName>returnCode</fieldName>
          <sourceType>RAWRESULT</sourceType>
          <compare id="51315ad0-8d3b-4d8c-b4fa-163a9e73df72">
            <annotation/>
            <name>Config Item</name>
            <text>0</text>
            <matchType>=</matchType>
          </compare>
          <filters/>
        </expression>
      </matchRules>
    </opResponse>
    <opResponse id="fe2c4371-5ebe-45ff-8920-1efcb60b7e45">
      <annotation/>
      <name>failure</name>
      <isDefault>true</isDefault>
      <onFailure>true</onFailure>
      <type>ERROR</type>
      <matchRules>
        <expression id="4629bd37-91ed-4fa9-8167-5c30209ffe6a">
          <annotation/>
          <name>returnCode</name>
          <fieldName>returnCode</fieldName>
          <sourceType>RAWRESULT</sourceType>
          <compare id="1975032c-3545-4e50-8351-74bc2e9d52f7">
            <annotation/>
            <name>Config Item</name>
            <text>-1</text>
            <matchType>=</matchType>
          </compare>
          <filters/>
        </expression>
      </matchRules>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="209c8d89-6358-4a81-bf11-04679cb25e9a">
    <annotation/>
    <name>returnResult</name>
    <fieldName>returnResult</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="9108549e-ce5e-4e00-8b86-d79d66f2d6e3">
    <baseIcon>text_msg.png</baseIcon>
    <basePath>/E-mail/</basePath>
    <readOnly>false</readOnly>
    <layers/>
  </iconSpec>
  <plugin>
    <groupId>com.hp.oo</groupId>
    <artifactId>score-actions-base-plugin</artifactId>
    <version>1.23.2-SNAPSHOT</version>
    <actionName>Get Object Keys</actionName>
  </plugin>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
  </groupAliasRef>
  <overrideGroupAlias>${overrideJRAS}</overrideGroupAlias>
</operation>
