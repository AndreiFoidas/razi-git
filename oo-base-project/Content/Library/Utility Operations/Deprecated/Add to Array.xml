<?xml version="1.0" encoding="UTF-8"?><operation id="4e743535-f189-409c-be07-7886c9d68b35">
  <descriptionCdata>4e743535-f189-409c-be07-7886c9d68b35.description=&lt;pre&gt;Adds an element to a JavaScript array. The resulting array, with the element\nadded, will be returned in the Result output. The given element will be added\nas a string, which is what most flow variables contain.  By default the element\nwill be appended to the end of the array, but an index value can be set to\nindicate a different position.\n\nExamples\:\n   Adding element "pear" to [ "apple, "banana" ] will result in \n      [ "apple, "banana", "pear" ] .\n\n   Adding element "pear" at index 0 to [ "apple, "banana" ] will result in\n      [ "pear", "apple, "banana" ] .\n      \n   Adding element "1" to [ ] will result in [ "1" ].\n\n   Adding element "[1,2]" at index 1 to [ "apple, "banana" ] will result in\n      [ "apple, "[1,2]", "banana" ].\n\nNote that the original array input is not modified; the Result output will\ncontain the array with the new element added.  In order to modify the original\narray, the Result output can be assigned to the same flow variable that was\nused to populate the array input.\n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n      \nThe description of the enclosing folder describes the JSON format with examples,\nand the JSON format is described completely at http\://www.json.org.\n\nInputs\n\n   array\n      The JavaScript array that will be added to.  The operation will return a\n      failure if the array is not a JavaScript array; a normal OO list is NOT a\n      JavaScript array.  As noted above, this array will not be modified in\n      place, but rather the Result output will contain the array with the new\n      value.\n\n   element\n      The element to add into the array.  \n      \n      The element will be interpreted as a string and added into the array.  \n      That means that even if the value appears to be another valid JavaScript\n      object or array, it will be added as a simple string.  In order to add\n      these other types of JavaScript objects to an array, use the \n      "Add Object to Array" operation.\n\n   index\n      The index in the array in which the value will be inserted.\n      If an index is not specified, then the element will be appended to the\n      end of the array. \n      See the notes above for more information of specifying indexes.\n\nResponses\n\n   success\n      The element was added to the array at the specified position, and the \n      Result output will be populated with the resulting array.\n\n   failure\n      The array input does not contain a valid JavaScript array.  Result\n      will contain a message to that effect.  This will occur if the input\n      array is not a valid JavaScript array.  For example, if presented with a\n      common list value such as a,b,c it will fail because it lacks the\n      enclosing brackets and the quotes around each string element.  You may\n      wish to use a tool such as http\://www.jsonlint.com/ to help diagnose\n      problems with JavaScript Object Notation.\n\nOutputs\n\n   Result\n      The array with the new element added.\n&lt;/pre&gt;
</descriptionCdata>
  <annotation>4e743535-f189-409c-be07-7886c9d68b35.description</annotation>
  <name>Add to Array</name>
  <categories/>
  <inputs>
    <userInputBinding id="561e4eb9-b423-4dfc-883a-91ec8d11de75">
      <annotation/>
      <assignFromContext>true</assignFromContext>
      <assignToContext>true</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>array</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt/>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
    <userInputBinding id="d0c14a60-565d-43ac-bb80-c7d7d5b14c35">
      <annotation/>
      <assignFromContext>true</assignFromContext>
      <assignToContext>true</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>element</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt/>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
    <userInputBinding id="c5f3f827-0bcf-4007-89e7-d9cace754c02">
      <annotation/>
      <assignFromContext>true</assignFromContext>
      <assignToContext>true</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>index</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt/>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
  </inputs>
  <scriptlet id="fb98725d-b977-4992-9317-e3d94ca6d59c">
    <annotation/>
    <name>Operation Add to Array (4e743535-f189-409c-be07-7886c9d68b35)</name>
    <script>// One-liner to define JSON parser and stringifier.  Minified version of http://www.json.org/json2.js
if(!this.JSON){this.JSON={};}(function(){function f(n){return n&lt;10?'0'+n:n;} if(typeof Date.prototype.toJSON!=='function'){Date.prototype.toJSON=function(key){return isFinite(this.valueOf())?this.getUTCFullYear()+'-'+ f(this.getUTCMonth()+1)+'-'+f(this.getUTCDate())+'T'+f(this.getUTCHours())+':'+f(this.getUTCMinutes())+':'+f(this.getUTCSeconds())+'Z':null;};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf();};} var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','"':'\\"','\\':'\\\\'},rep;function quote(string){escapable.lastIndex=0;return escapable.test(string)?'"'+string.replace(escapable,function(a){var c=meta[a];return typeof c==='string'?c:'\\u'+('0000'+a.charCodeAt(0).toString(16)).slice(-4);})+'"':'"'+string+'"';} function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&amp;&amp;typeof value==='object'&amp;&amp;typeof value.toJSON==='function'){value=value.toJSON(key);}if(typeof rep==='function'){value=rep.call(holder,key,value);} switch(typeof value){case'string':return quote(value);case'number':return isFinite(value)?String(value):'null';case'boolean':case'null':return String(value);case'object':if(!value){return'null';}gap+=indent;partial=[];if(Object.prototype.toString.apply(value)==='[object Array]'){length=value.length;for(i=0;i&lt;length;i+=1){partial[i]=str(i,value)||'null';} v=partial.length===0?'[]':gap?'[\n'+gap+partial.join(',\n'+gap)+'\n'+mind+']':'['+partial.join(',')+']';gap=mind;return v;}if(rep&amp;&amp;typeof rep==='object'){length=rep.length;for(i=0;i&lt;length;i+=1){k=rep[i];if(typeof k==='string'){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}}else{for(k in value){if(Object.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}} v=partial.length===0?'{}':gap?'{\n'+gap+partial.join(',\n'+gap)+'\n'+ mind+'}':'{'+partial.join(',')+'}';gap=mind;return v;}} if(typeof JSON.stringify!=='function'){JSON.stringify=function(value,replacer,space){var i;gap='';indent='';if(typeof space==='number'){for(i=0;i&lt;space;i+=1){indent+=' ';}}else if(typeof space==='string'){indent=space;} rep=replacer;if(replacer&amp;&amp;typeof replacer!=='function'&amp;&amp;(typeof replacer!=='object'||typeof replacer.length!=='number')){throw new Error('JSON.stringify');} return str('',{'':value});};} if(typeof JSON.parse!=='function'){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k,v,value=holder[key];if(value&amp;&amp;typeof value==='object'){for(k in value){if(Object.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v;}else{delete value[k];}}}} return reviver.call(holder,key,value);} text=String(text);cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(a){return'\\u'+ ('0000'+a.charCodeAt(0).toString(16)).slice(-4);});} if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,'@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,']').replace(/(?:^|:|,)(?:\s*\[)+/g,''))){j=eval('('+text+')');return typeof reviver==='function'?walk({'':j},''):j;} throw new SyntaxError('JSON.parse');};}}());

// default response
scriptletResponse = "failure";
scriptletResult = "input value is not a valid JavaScript array";

try {
    jsArray = JSON.parse(array);

    if (isArray(jsArray)) {

        // make sure index is valid (either a number or empty)
        if ( (typeof(index) == "undefined") || (index == "") )
            index = jsArray.length;
        else if (isNaN(index))
            throw("index is not a number");

        // throw an exception if the index is out of bounds
        if ( (index &gt; jsArray.length) || (index &lt; (jsArray.length * -1)) ) {
            throw("index out of bounds");
        }

        // insert the item
        jsArray.splice(index, 0, element);

        scriptletResult = JSON.stringify(jsArray);
        scriptletResponse = "success";
               
    }
} catch (e){ 
    if (! (e instanceof SyntaxError))
        scriptletResult = ""+e;
}

// General function to test whether object is an array
function isArray(obj) {
    if (obj.constructor.toString().indexOf("Array") == -1)
        return false;
    else
        return true;
}</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="0de3fa32-479a-4f65-a696-3bb96863f28c">
      <annotation/>
      <name>success</name>
      <isDefault>false</isDefault>
      <onFailure>false</onFailure>
      <type>RESOLVED</type>
      <matchRules/>
    </opResponse>
    <opResponse id="f3061038-ddf5-4d25-a89a-d951a31061e9">
      <annotation/>
      <name>failure</name>
      <isDefault>true</isDefault>
      <onFailure>true</onFailure>
      <type>ERROR</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="895da6ec-26f9-4589-998c-807fb503c755">
    <annotation/>
    <name>returnResult</name>
    <fieldName>returnResult</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="197389d3-a7cf-4ffb-82c0-6f70d532370d">
    <baseIcon>jar.png</baseIcon>
    <basePath>/Others/</basePath>
    <readOnly>false</readOnly>
    <layers>
      <iconSpec id="1a3f93cb-6659-4e1c-8f38-6044831fbb74">
        <baseIcon>add.png</baseIcon>
        <basePath>/Annotations/</basePath>
        <readOnly>false</readOnly>
        <layers/>
      </iconSpec>
    </layers>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
  </groupAliasRef>
  <overrideGroupAlias>${overrideJRAS}</overrideGroupAlias>
</operation>
