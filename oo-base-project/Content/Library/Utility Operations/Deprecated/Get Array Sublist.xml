<?xml version="1.0" encoding="UTF-8"?><operation id="14dcbcdc-22ae-456d-baeb-0e689f2b724c">
  <descriptionCdata>14dcbcdc-22ae-456d-baeb-0e689f2b724c.description=&lt;pre&gt;Get a JSON array which is the subset of an array. The subset can be defined by a start index (fromIndex) alone, in \nwhich case the resulting array will contain elements from the input 'array' from the 'fromIndex' to the end of the input array. \n\nThe optional 'toIndex' parameter can be supplied, in which case the sublist returned by this operation will contain the elements \nin array starting with 'fromIndex', and include everything up to, but not including, the element at 'toIndex'.\n\nWhen specifying the index to an array element in javascript it is possible to use the standard notation, where the 1st \nelement from the left is index 0, and the right-most element is (n-1), in an array with n elements. However, \nit is also possible to specify elements starting from the right side of the array using negative numbers, in which case\nthe right-most element is referred to by index -1 and the left-most element is at position (-1 * n), again for an array with n elements.\n\nIt is also possible to specify 'fromIndex' and 'toIndex' in either the "from the left" positive format or in the "from the right" negative\nformat, and even specify them each in a different format in the same call to this operation. However, sublist is always create from \nleft to right from the original array, and therefore 'fromIndex' must allayws be to the left of 'toIndex' in the parent array. Any combination\nof 'fromIndex' and 'toIndex' which violates this rule (including the case where fromIndex\=toIndex) will return an empty array. \n\nSo, for example\:\nWith the input array\: [0,1,2,3,4]\n\nfromIndex\=0  and toIndex\=1                  returns [0]\nfromIndex\=0  and toIndex\=3                  returns [0,1,2]\nfromIndex\=-1 and toIndex not defined   returns [4]\nfromIndex\=-2 and toIndex\=-1                returns [3]\nfromIndex\=0 and toIndex\=-1                  returns [0,1,2,3]\nfromIndex\=1 and toIndex\=1                   returns []\n\n\n\n\nThe description of the enclosing folder describes the JSON format with examples,\nand the JSON format is described completely at http\://www.json.org.\n\n\nInputs\:\n    array - String representation of a JSON array. Arrays in JSON are comma seperated lists of objects, enclosed in square brackets ( [ ] ).\nExamples\: [1,2,3] or ["one","two","three"] or [{"one"\:1, "two"\:2}, 3, "four"]\n\n\n    fromIndex - The index of the element in 'array' which will be the 1st element in the sublist array.\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\n\n\n    toIndex - Optional. If this input is supplied, the sub-list will contain the elements from the parent array, starting at the position startIndex, up to, \n                    but not including, the element at toIndex. In other words, the element in the parent array at toIndex is one past the last element \n                    of the sub-list returned by this operation. \n                    If this input is not supplied, the sub-array will contain the elements of 'array' beginning with fromIndex to the end of the array.\nValid values\: Integer between (-1*n) and (n-1) for an array with n elements.\n\nResponses\:\n    success - The operation completed as stated in the description.\n    failure - The operation failed. See the message in returnResult for details\n\n\nResults\:\n    returnResult - The new JSON array which is a subset of the input array.\n\n&lt;/pre&gt;
</descriptionCdata>
  <annotation>14dcbcdc-22ae-456d-baeb-0e689f2b724c.description</annotation>
  <name>Get Array Sublist</name>
  <categories/>
  <inputs>
    <userInputBinding id="f8137bf5-579c-4c34-9176-b51ec001ad68">
      <annotation/>
      <assignFromContext>true</assignFromContext>
      <assignToContext>true</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>array</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt/>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
    <userInputBinding id="a61fd25e-df80-48ba-8edb-d998bbdf351d">
      <annotation/>
      <assignFromContext>true</assignFromContext>
      <assignToContext>true</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>fromIndex</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt/>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
    <userInputBinding id="1d593165-28d5-4420-8a25-80fb59f9574b">
      <annotation/>
      <assignFromContext>true</assignFromContext>
      <assignToContext>true</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>toIndex</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt/>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
  </inputs>
  <scriptlet id="48b65a5b-b3eb-44db-9f15-d61aa666ebb7">
    <annotation/>
    <name>Operation Get Array Sublist (14dcbcdc-22ae-456d-baeb-0e689f2b724c)</name>
    <script>// One-liner to define JSON parser and stringifier.  Minified version of http://www.json.org/json2.js
if(!this.JSON){this.JSON={};}(function(){function f(n){return n&lt;10?'0'+n:n;} if(typeof Date.prototype.toJSON!=='function'){Date.prototype.toJSON=function(key){return isFinite(this.valueOf())?this.getUTCFullYear()+'-'+ f(this.getUTCMonth()+1)+'-'+f(this.getUTCDate())+'T'+f(this.getUTCHours())+':'+f(this.getUTCMinutes())+':'+f(this.getUTCSeconds())+'Z':null;};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf();};} var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','"':'\\"','\\':'\\\\'},rep;function quote(string){escapable.lastIndex=0;return escapable.test(string)?'"'+string.replace(escapable,function(a){var c=meta[a];return typeof c==='string'?c:'\\u'+('0000'+a.charCodeAt(0).toString(16)).slice(-4);})+'"':'"'+string+'"';} function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&amp;&amp;typeof value==='object'&amp;&amp;typeof value.toJSON==='function'){value=value.toJSON(key);}if(typeof rep==='function'){value=rep.call(holder,key,value);} switch(typeof value){case'string':return quote(value);case'number':return isFinite(value)?String(value):'null';case'boolean':case'null':return String(value);case'object':if(!value){return'null';}gap+=indent;partial=[];if(Object.prototype.toString.apply(value)==='[object Array]'){length=value.length;for(i=0;i&lt;length;i+=1){partial[i]=str(i,value)||'null';} v=partial.length===0?'[]':gap?'[\n'+gap+partial.join(',\n'+gap)+'\n'+mind+']':'['+partial.join(',')+']';gap=mind;return v;}if(rep&amp;&amp;typeof rep==='object'){length=rep.length;for(i=0;i&lt;length;i+=1){k=rep[i];if(typeof k==='string'){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}}else{for(k in value){if(Object.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}} v=partial.length===0?'{}':gap?'{\n'+gap+partial.join(',\n'+gap)+'\n'+ mind+'}':'{'+partial.join(',')+'}';gap=mind;return v;}} if(typeof JSON.stringify!=='function'){JSON.stringify=function(value,replacer,space){var i;gap='';indent='';if(typeof space==='number'){for(i=0;i&lt;space;i+=1){indent+=' ';}}else if(typeof space==='string'){indent=space;} rep=replacer;if(replacer&amp;&amp;typeof replacer!=='function'&amp;&amp;(typeof replacer!=='object'||typeof replacer.length!=='number')){throw new Error('JSON.stringify');} return str('',{'':value});};} if(typeof JSON.parse!=='function'){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k,v,value=holder[key];if(value&amp;&amp;typeof value==='object'){for(k in value){if(Object.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v;}else{delete value[k];}}}} return reviver.call(holder,key,value);} text=String(text);cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(a){return'\\u'+ ('0000'+a.charCodeAt(0).toString(16)).slice(-4);});} if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,'@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,']').replace(/(?:^|:|,)(?:\s*\[)+/g,''))){j=eval('('+text+')');return typeof reviver==='function'?walk({'':j},''):j;} throw new SyntaxError('JSON.parse');};}}());

// default response
scriptletResponse = "failure";
scriptletResult = "input value is not a valid JavaScript array";

try {

    // Interpret array as a javascript array
    jsArray = JSON.parse(array);
	        
    if (isArray(jsArray)) {

        // convert fromIndex and jsArray.length to numbers so we can compare them
        var start = new Number(fromIndex);
        var length = new Number(jsArray.length);
        
        // make sure that fromIndex is a number
        if (isNaN(start)){
            throw "fromIndex  is not a number.";
        }
        
	    // in order to check bounds, we have to check for positive and negative
        // values of toIndex. For positive values, the index is 0 based, but 
        // for negative values it is 1 based (i.e. -1 is the 1st element from the left)
	    if ( (start &gt;= length) || (start &lt; (length * -1)) ){
	        throw "fromIndex out of bounds";
	    }
	    
        var toIndex;  // declare toIndex in case the input is not populated
	
	    if (toIndex == undefined)
	        var sublist = jsArray.slice(start);
	    else {
	        
	        // convert toIndex to a Number
	        var end = new Number(toIndex);
	        
	        if (isNaN(end)){
	            throw "toIndex is not a number.";
	        }
            
            // same check for toIndex as we did on fromIndex. 
            // make sure it's not past the end, or before the begining if it's negative
	        if ( (end &gt;= length) || (end &lt; (length * -1)) )
	            throw length + " toIndex (" + end + ") out of bounds";
	        
	        var sublist = jsArray.slice(start, end);
	    }
	    
	    scriptletResult = JSON.stringify(sublist);
	    scriptletResponse = "success";
    }
} 
catch (e){ 
    if (! (e instanceof SyntaxError))
        scriptletResult = ""+e;
}

// General function to test whether object is an array
function isArray(obj) {
	if (obj.constructor.toString().indexOf("Array") == -1)
		return false;
	else
		return true;
}</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="38935d6a-8502-49eb-91e8-921cb9e63ee4">
      <annotation/>
      <name>success</name>
      <isDefault>false</isDefault>
      <onFailure>false</onFailure>
      <type>RESOLVED</type>
      <matchRules/>
    </opResponse>
    <opResponse id="f7d2eb3a-008b-49ee-80f0-9e2acc83df48">
      <annotation/>
      <name>failure</name>
      <isDefault>true</isDefault>
      <onFailure>true</onFailure>
      <type>ERROR</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="00f56ec0-26b8-45f6-b9fb-5484419caa2a">
    <annotation/>
    <name>returnResult</name>
    <fieldName>returnResult</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="87a86cfc-eabb-4b1d-bb33-cb4a27641b99">
    <baseIcon>jar.png</baseIcon>
    <basePath>/Others/</basePath>
    <readOnly>false</readOnly>
    <layers>
      <iconSpec id="2103d411-a6f0-42b6-9c10-5b89e7866a00">
        <baseIcon>get.png</baseIcon>
        <basePath>/Annotations/</basePath>
        <readOnly>false</readOnly>
        <layers/>
      </iconSpec>
    </layers>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
  </groupAliasRef>
  <overrideGroupAlias>${overrideJRAS}</overrideGroupAlias>
</operation>
