<?xml version="1.0" encoding="UTF-8"?>
<scriptletEvaluator id="76782f9d-1cd1-428e-b6b9-10e99fe092ff">
  <descriptionCdata><![CDATA[76782f9d-1cd1-428e-b6b9-10e99fe092ff.description=Windows filenames can be short names, pathnames (both relative and absolute) or UNC paths. The extended length prefix, \\\\?\\, is also supported on local filenames. Length restrictions are not enforced.\n  Examples\:  f-1.txt, ,z\:\\_.txt, \\\\somehost_1\\share\\myfile.xml
]]></descriptionCdata>
  <annotation>76782f9d-1cd1-428e-b6b9-10e99fe092ff.description</annotation>
  <name>windows filename</name>
  <scriptlet id="3d0243b8-3a34-45be-8345-b1fd7b08273a">
    <annotation></annotation>
    <name>EvaluatorScriptlet</name>
    <script>// Local file.  May include optional drive letter and leading slash, for
// example C:\path.. D:path or just \path or even path.  We are only
// capturing the portion after the (optional) leading slash for further
// processing
var driveRegex = /^(?:[^\W\d]:)?\\?([^\\].*)/i;  

// Local file using the \\?\ prefix, which enables the file path to
// be much longer (32,767 characters) than the default (260 chars)
var extendedLengthRegex = /^\\\\\?\\[^\W\d]:\\([^\\].*)/i;

// Starts with \\servername\sharename
var uncRegex = /^\\\\[^\/\\:*?&quot;&lt;&gt;|]+\\[^\/\\:*?&quot;&lt;&gt;|]+\\(.*)/;

// By default, allow relative filenames (those with . and ..)
var allowRelative = true;

// Try to match the local file
var myArray = driveRegex.exec(scriptletInput);

if (myArray == null) {  
    // else match the extended length pattern
    myArray = extendedLengthRegex.exec(scriptletInput);
    if (myArray != null)
        allowRelative = false;
}

if (myArray == null) {  
    // else match the UNC pattern
    myArray = uncRegex.exec(scriptletInput);
}

if (myArray != null) {
    // Process first capture group, which should be the path
    var splits = myArray[1].split(&quot;\\&quot;);

    if (splits.length &gt; 0) {

        // Each component in the path can contain any characters
        // except the following 9 invalid ones: \ / : * ? &quot; &lt; &gt; |
        // and also cannot end in period or space.  Note that
        // this also requires at least one character to be present
        var componentRegex = /^[^\/\\:*?&quot;&lt;&gt;|]*[^\/\\:*?&quot;&lt;&gt;| .]$/;

        // Each component cannot consist of a DOS reserved name
        var reserved = /^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])$/i;

        var valid = true;
        for (var i=0; i&lt;splits.length; i++)
        {
            if (splits[i].match(reserved)) {
                valid = false;
                break;
            }

            // Permit . and .. within the path (not as a filename)
            // if relative filenames permitted.
            // Otherwise require it to match the componentRegext
            if (splits[i] == &quot;..&quot; || splits[i] == &quot;.&quot; ) {
                if (i == splits.length-1 || !allowRelative) {
                    valid = false;
                    break;
                }
            } else if ( ! splits[i].match(componentRegex)) {
                valid = false;
                break;
            }
            
            // Perform checks specific to the last component, which
            // is the filename. 
            if (i == splits.length-1) {

                // Check that the basename (the portion before the
                // period) does not match a reserved word.  This 
                // catches files like &quot;con.txt&quot; which are to be avoided
                var basename = splits[i].split(&quot;\.&quot;);

                for(var j=0; j&lt;basename.length-1; j++) {
                    if (basename[j].match(reserved)) {
                        valid = false;
                        break;
                    }
                }
            }
        }

        if (valid) {
            matchRanges.setMatches(true);
            matchRanges.addRange(0,scriptletInput.length);
        }
    }
}</script>
    <type>RHINO</type>
  </scriptlet>
</scriptletEvaluator>