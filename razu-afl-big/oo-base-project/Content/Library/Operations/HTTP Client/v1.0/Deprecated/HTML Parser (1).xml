<?xml version="1.0" encoding="UTF-8"?><operation id="60340cc7-38b4-400b-b90a-17b39ad9d36d">
  <descriptionCdata>60340cc7-38b4-400b-b90a-17b39ad9d36d.description=&lt;pre&gt;\nScans for a specified HTML flag and returns everything between that flag and its closing flag. For example\:\nif flag is table then then everything between &lt;table&gt; and &lt;/table&gt; is returned. The function does support nested tables, specifically if the html had\:\n&lt;table&gt;\nfoo\n&lt;table&gt;\nbar\n&lt;/table&gt;\n&lt;/table&gt;\n&lt;table&gt;\nmoo\n&lt;/table&gt;\nThe inner table (bar) will NOT be gotten. But foo or moo can be, and if foo is gotten it will contain the sub-table bar.\n\ninputs\:\noccurrenceNumber - which flagged section to return, 1 \= first section, 2 \= second. 0 will return the entire document.\nstartFlag - the html flag to parse on, in the above example this was &lt;table\nendFlag - the html flag to parse on, in the above example this was &lt;/table&gt;\nhtml - the html to parse. NOTE, this is the actual html, not the path to an html file.\n\nreturns - The information between &lt;flag ...&gt; and &lt;/flag&gt;\n\nExtra Results\:\nhtmlParamNames - The names of all parameters in the &lt;flag ...&gt; header.\nhtmlParamValues - The names of all values that correspond to htmlParamNames.\n\nResponses\:\nsuccess - the specified flag was returned.\nfailure - The parse failed, the html does not have enough occurrences of flag.\n&lt;/pre&gt;\n
</descriptionCdata>
  <annotation>60340cc7-38b4-400b-b90a-17b39ad9d36d.description</annotation>
  <name>HTML Parser (1)</name>
  <categories/>
  <inputs>
    <userInputBinding id="5f966691-5af8-4432-997a-5f51a77f7e06">
      <annotation/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>html</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt/>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
    <userInputBinding id="610ae034-5eca-4170-93ad-0b46c7386fed">
      <annotation/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>occurrenceNumber</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt/>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
    <userInputBinding id="225d74c4-5204-4891-81fe-974b23d6c4f6">
      <annotation/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>startFlag</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt/>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
    <userInputBinding id="e95f628a-f218-4c63-9b77-c6bd5d818d7d">
      <annotation/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>true</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>endFlag</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
      <prompt/>
      <isMultiSelect>false</isMultiSelect>
      <sourceDelimiter>|</sourceDelimiter>
    </userInputBinding>
    <staticBinding id="ffec5a07-bb31-4c81-baf0-8ed89ffb08b8">
      <annotation/>
      <toContextKey/>
      <fromContextKey/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey/>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_1</inputSymbol>
      <listDelimiter/>
      <value>${html}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="c5d98562-34f8-40f9-a979-430656a7734b">
      <annotation/>
      <toContextKey/>
      <fromContextKey/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey/>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_2</inputSymbol>
      <listDelimiter/>
      <value>${occurrenceNumber}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="dfbd35b8-03c1-4c80-a213-129e8d6889ad">
      <annotation/>
      <toContextKey/>
      <fromContextKey/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey/>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_3</inputSymbol>
      <listDelimiter/>
      <value>${in3}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="21e730cb-42b6-4ff8-8dcb-06ca2cdfb75e">
      <annotation/>
      <toContextKey/>
      <fromContextKey/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey/>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_4</inputSymbol>
      <listDelimiter/>
      <value>${in4}</value>
      <record>false</record>
    </staticBinding>
  </inputs>
  <scriptlet id="0d312b51-89b3-45ed-b4ed-153e1df81d63">
    <annotation/>
    <name>Operation:HTML Parser (1) (60340cc7-38b4-400b-b90a-17b39ad9d36d)</name>
    <script>scriptletResponse = "failure";
try{
var index = parseInt(occurrenceNumber);
var paramNames = "";
var paramVals = "";
var usedEndFlag = "";
endFlag = endFlag.toLowerCase();
startFlag = startFlag.toLowerCase();
while (html.length &gt; 0 &amp;&amp; index &gt;0){

	var htmlLC = html.toLowerCase();
	var subStart = htmlLC.indexOf(startFlag);//indexOfCaseless(html,startFlag); 
	if (subStart &lt;0)
		throw new java.lang.Exception("Unable to find specified flag or occurrence of flag");;
	var accum = subStart;
	var end = getEnd(subStart+1);
	index --;	
	if (index == 0){
		var paramsEnd = getEndParamsIndex(subStart, html);
		getParams(html.substring(subStart+startFlag.length , paramsEnd));
		subStart = getEndParamsIndex(subStart, html);
		html = html.substring(subStart + 1 , end);
	}
	else
		html = html.substring(end+(usedEndFlag).length+1, html.length); 
}
scriptletContext.put("htmlParamNames", paramNames);
scriptletContext.put("htmlParamValues", paramVals);
if (html.length &lt;= 0 &amp;&amp; paramNames.length&lt;=0){
	scriptletResponse = "failure";
	scriptletResult = ""+html; 
}
else{
	scriptletResponse = "success";
	scriptletResult = ""+html; 
}
}
catch (e){
scriptletResponse = "failure";
scriptletResult = ""+e;
}

function indexOfCaseless(container, toFind){
	return indexOfCaselss(container,toFind,0);
}

function indexOfCaseless(container, toFind, offset){
	return container.toLowerCase().indexOf(toFind.toLowerCase(), offset);
}

function getParams(info){
	info = info.replace(/\s+&amp;/, "");
	info = info.replace(/^\s+/, "");
	var split = info.split(/^([^\s=]+)=*("[^"]*"|\S*)/);
	while (split != null &amp;&amp; split.length &gt; 2){
		if (paramNames != null &amp;&amp; paramNames.length &gt; 0)
			paramNames +=",";
		if (paramNames != null &amp;&amp; paramNames.length &gt; 0)
			paramVals +=",";
		paramNames += split[1];
		if(split[2].indexOf("\"")==0)
			paramVals += split[2].substring(1, split[2].length-1);
		else
			paramVals += split[2];
		if (split.length &gt; 3)
			split = split[3].replace(/^\s+/, "").split(/^([^\s=]+)=*("[^"]*"|\S*)/);
		else
			split = null
	}
}

function trimGRLT(toTrim){
	toTrim = toTrim.replace(/&lt;+&amp;/, "");
	toTrim = toTrim.replace(/^&lt;+/, "");
	toTrim = toTrim.replace(/&gt;+&amp;/, "");
	toTrim = toTrim.replace(/^&gt;+/, "");
	return toTrim;
}

function getEndParamsIndex(offset, toParse){
	var quoteStart = html.indexOf("\"", subStart);
	var gtStart = html.indexOf("&gt;", subStart);
	while (quoteStart &lt;gtStart &amp;&amp; quoteStart &gt;=0){
		quoteStart = html.indexOf("\"", quoteStart+1);
		gtStart = html.indexOf("&gt;", quoteStart+1);
		quoteStart = html.indexOf("\"", quoteStart+1);
	}
	return gtStart;
}

function getEnd(offset) {
	//var end = indexOfCaseless(html, endFlag, offset);
	var end = htmlLC.indexOf(endFlag, offset);
	var temp = html.substring(end, html.length);
	if (endFlag == "&lt;"){
		var proposedEnd = "&lt;/"+trimGRLT(startFlag)
		if(temp.toLowerCase().indexOf(proposedEnd) == 0){
		//if (indexOfCaseless(temp, proposedEnd)==0){
			//end = indexOfCaseless(html, proposedEnd, offset);
			end = htmlLC.indexOf(proposedEnd, offset);
			usedEndFlag = proposedEnd;
		}
	}
	else
		usedEndFlag = endFlag;
	//var recCheck = indexOfCaseless(html, startFlag, offset);
	var recCheck = htmlLC.indexOf(startFlag, offset);
	while (recCheck &lt; end &amp;&amp; recCheck &gt;= 0 &amp;&amp; end &gt;=0){
		if (recCheck &gt; end)
			return end;
		else
			offset = getEnd(recCheck+1)+1; 
		//recCheck = indexOfCaseless(html, startFlag, offset);
		recCheck = htmlLC.indexOf(startFlag, offset);
		//end = indexOfCaseless(html, endFlag, offset);
		end = htmlLC.indexOf(endFlag, offset);
	}
	if (end &gt; 0)
		return end
	else
		return html.length-1;
}</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="cb853dc2-b579-4621-a202-cf093e7d50a7">
      <annotation/>
      <name>success</name>
      <isDefault>false</isDefault>
      <onFailure>false</onFailure>
      <type>RESOLVED</type>
      <matchRules/>
    </opResponse>
    <opResponse id="7fdaff57-7de7-40b3-b204-97422b325a94">
      <annotation/>
      <name>failure</name>
      <isDefault>true</isDefault>
      <onFailure>true</onFailure>
      <type>ERROR</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="98b36284-4034-4061-8664-c6f1ea8dc745">
    <annotation/>
    <name>Field 1</name>
    <fieldName>Field_1</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="8c890de4-5076-47b7-a78d-e5403bf47825">
    <baseIcon>website.png</baseIcon>
    <basePath>Application/</basePath>
    <readOnly>false</readOnly>
    <layers>
      <iconSpec id="efaaa534-8967-42b3-9326-909ad812e785">
        <baseIcon>wrench.png</baseIcon>
        <basePath>Annotations/</basePath>
        <readOnly>false</readOnly>
        <layers/>
      </iconSpec>
    </layers>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
    </groupAliasRef>
  <overrideGroupAlias>${overrideJRAS}</overrideGroupAlias>
</operation>
