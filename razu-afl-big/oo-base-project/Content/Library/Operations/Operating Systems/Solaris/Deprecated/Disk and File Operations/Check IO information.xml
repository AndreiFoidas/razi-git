<?xml version="1.0" encoding="UTF-8"?><operation id="dafafeb5-ffe3-4996-a192-84fcdea08c50">
  <descriptionCdata>dafafeb5-ffe3-4996-a192-84fcdea08c50.description=&lt;pre&gt;\nChecks for anomolies in the output of IOStat. There should be two readings, the average since bootup, and the current.\n\n\nInput Parameters\:\ndata - the raw output of the Get Extended IO Information operation.\n\nReturns\:\nA summary of the IO information.\n\nResponses\:\nsuccess - output successfully checked.&lt;/pre&gt;
</descriptionCdata>
  <annotation>dafafeb5-ffe3-4996-a192-84fcdea08c50.description</annotation>
  <name>Check IO information</name>
  <categories/>
  <inputs>
    <resultBinding id="86a4a9c1-f5fc-478e-80f5-910411211baa">
      <annotation/>
      <assignFromContext>true</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>data</inputSymbol>
      <listDelimiter>,</listDelimiter>
      <record>false</record>
    </resultBinding>
    <staticBinding id="0889c7c9-5af7-4fb6-b33a-e175f0d3fcb1">
      <annotation/>
      <toContextKey/>
      <fromContextKey/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey/>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_1</inputSymbol>
      <listDelimiter/>
      <value>${data}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="419bc09b-2d9c-48f4-86ec-f062ccaecf40">
      <annotation/>
      <toContextKey/>
      <fromContextKey/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey/>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_2</inputSymbol>
      <listDelimiter/>
      <value>${in2}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="bea98e45-5869-4ef2-ade0-709e8b788f26">
      <annotation/>
      <toContextKey/>
      <fromContextKey/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey/>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_3</inputSymbol>
      <listDelimiter/>
      <value>${in3}</value>
      <record>false</record>
    </staticBinding>
    <staticBinding id="2bedf06a-ef59-448b-9c4b-f6e1be01a24c">
      <annotation/>
      <toContextKey/>
      <fromContextKey/>
      <assignFromContext>false</assignFromContext>
      <assignToContext>false</assignToContext>
      <inputType>STRING</inputType>
      <recordKey/>
      <isList>false</isList>
      <required>false</required>
      <isPersisted>true</isPersisted>
      <inputSymbol>Field_4</inputSymbol>
      <listDelimiter/>
      <value>${in4}</value>
      <record>false</record>
    </staticBinding>
  </inputs>
  <scriptlet id="fea02b2a-d364-46b9-a883-1c63f7654d6c">
    <annotation/>
    <name>Operation:Check IO information (dafafeb5-ffe3-4996-a192-84fcdea08c50)</name>
    <script>// this assume we are getting extended IO stat information and looks for anomolies
// there should be two readings, the first is the average since boot,
// the second one is the current 

output = "";
showIOStatInfo();
scriptletResult = output;

function showIOStatInfo() {

   iostat = scriptletContext.get("ic_iostat");

   // deal with the iostat information
   // this assume we are getting extended IO stat information and looks for anomolies
   // there should be two readings, the first is the average since boot,
   // the second one is the current 

   output = "\nDevice IO checks:\n";

   // first, split it all into lines
   data = "";
   data += iostat;
   lines = data.split(/\n/);

   // we know the first two lines are header, go find the header for the second set
   for (i = 2; i &lt; 1000; i++) {
      second_set = 0;
      if (lines[i].match(/extended device/) != null) {
         second_set = i + 2;
         break;
      }
   }

   // how many lines are there?
   line_count = i - 2;
   if (line_count &gt; 0) {
      for (i = 0; i &lt; line_count; i++) {
         // split the average line and current line into columns
         average = lines[i + 2].split(/\s+/);
         current = lines[line_count + i + 4].split(/\s+/);
         this_output = "";

         // compare key stats of each lines average versus now
         creads = parseInt(current[1]);
         areads = parseInt(average[1]);
         cwrites = parseInt(current[2]);
         awrites = parseInt(average[2]);
         cwsvc = parseInt(current[7]);
         casvc = parseInt(current[8]);
         cwait = parseInt(current[9]);
         await = parseInt(average[9]);
         cbusy = parseInt(current[10]);
         cerrors = parseInt(current[14]);
         name = current[15];

         // look for some anomolies
         if (cwait &gt; (await * 1.25)) this_output += "Current disk wait on " + name + " is more than 25% above average\n";
         if (cwait &gt; 5 &amp;&amp; cbusy &gt;= 10) this_output += "Disk wait on " + name + " is above 5%\n";
         if (cwsvc + casvc &gt; 30 &amp;&amp; cbusy &gt; 5) this_output += "Current disk wait time exceeds 30 ms on " + name + "\n";
         if (cbusy &gt;= 60) this_output += name + " is over 60% busy\n";
         if (creads &gt; (areads * 3)) this_output += "Current reads on " + name + " are more than 300% of average\n";
         if (cwrites &gt; (awrites * 3)) this_output += "Current writes on " + name + " are more than 300% of average\n";

         // check error counts
         if (cerrors &gt; 3) this_output += "More than 3 errors encountered on" + name + "\n";
      
         // check to see if we found anything
         if (this_output == "") {
            this_output = name + " looks normal\n";
         }
         output += this_output;
      }
   }
   
//   // add in the current raw data
//   output += "\nDetailed iostat information:\n";
//   for (i = line_count + 2; i &lt; 10000; i++) {
//      if (lines[i] == null) break;
//      output += lines[i] + "\n";
//   }
}


</script>
    <type>RHINO</type>
  </scriptlet>
  <possibleResponses>
    <opResponse id="7f9b6927-44dd-40db-804c-ad75e06e4cb7">
      <annotation/>
      <name>success</name>
      <isDefault>true</isDefault>
      <onFailure>false</onFailure>
      <type>RESOLVED</type>
      <matchRules/>
    </opResponse>
  </possibleResponses>
  <availableResultExpressions/>
  <resultExpression id="c48a33ca-d624-4d31-96ad-8c57ca273c40">
    <annotation/>
    <name>Field 1</name>
    <fieldName>Field_1</fieldName>
    <sourceType>RAWRESULT</sourceType>
    <filters/>
  </resultExpression>
  <iconSpec id="13131785-991b-4574-a972-4eea3e7d4e74">
    <baseIcon>PCI-card.png</baseIcon>
    <basePath>Operating System/</basePath>
    <readOnly>false</readOnly>
    <layers>
      <iconSpec id="64ed7f65-8f21-465e-bae2-b9ae49142e54">
        <baseIcon>view.png</baseIcon>
        <basePath>Annotations/</basePath>
        <readOnly>false</readOnly>
        <layers/>
      </iconSpec>
    </layers>
  </iconSpec>
  <opRef>
    <refId>ddd79f22-8b1e-4605-88d5-d912bb2da2b9</refId>
  </opRef>
  <fieldValues/>
  <groupAliasRef>
    <refId>5233030c-af46-432b-a682-b326ca6bf2ae</refId>
    <refName>RAS_Operator_Path</refName>
    </groupAliasRef>
  <overrideGroupAlias>${overrideJRAS}</overrideGroupAlias>
</operation>
